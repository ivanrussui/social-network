{"version":3,"file":"static/js/5.539c8dab.chunk.js","mappings":"0NACA,GAAgB,iBAAmB,sCAAsC,eAAiB,oCAAoC,KAAO,0BAA0B,SAAW,8BAA8B,KAAO,2B,oBCA/M,EAAgC,qCAAhC,EAA8E,8B,SCsC9E,EApC+B,SAACA,GAC5B,OAAgCC,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA4BF,EAAAA,EAAAA,UAASD,EAAMI,QAA3C,eAAOA,EAAP,KAAeC,EAAf,MAEAC,EAAAA,EAAAA,YAAU,WACND,EAAUL,EAAMI,UACjB,CAACJ,EAAMI,SAeV,OACI,iBAAKG,UAAWC,EAAhB,WACI,oBACA,cAAGD,UAAWC,EAAd,sBACGN,IACK,iBAAMO,cAlBG,WACrBN,GAAY,IAiBA,SAAwCH,EAAMI,QAAU,cAE9DF,IACM,kBAAOQ,YAAaV,EAAMI,OAAQO,SAZ3B,SAACC,GACpBP,EAAUO,EAAEC,cAAcC,QAW8CC,WAAW,EAChEC,OAlBG,WACtBb,GAAY,GACZH,EAAMiB,aAAab,UCfdc,EAAU,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,aACnC,OACI,iBAAKb,UAAWc,EAAAA,SAAhB,WACI,yBAAIF,EAAJ,SACA,cAAGG,KAAI,UAAKF,GAAgBG,OAAQ,SAAUC,IAAI,aAAlD,SAAgEJ,QCH/DK,EAAc,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,aAC3C,OACI,iBAAKrB,UAAWc,EAAAA,gBAAhB,UACMM,IAAW,mBAAQE,QAASD,EAAjB,qBACb,iBAAKrB,UAAWc,EAAAA,KAAhB,WAAwB,+CAEnBK,EAAQI,gBACL,gBAAKC,IAAI,+EACJC,IAAI,WAGT,gBACID,IAAI,gHACJC,IAAI,kBAGhB,4BAAK,cAAGzB,UAAWc,EAAAA,KAAd,wBAAL,IAA2CK,EAAQO,aACnD,4BAAK,cAAG1B,UAAWc,EAAAA,KAAd,wBAAL,IAA2CK,EAAQQ,8BACnD,4BAAK,cAAG3B,UAAWc,EAAAA,KAAd,wBAAqCK,EAAQS,YAWlD,4BAAK,cAAG5B,UAAWc,EAAAA,KAAd,uBAAL,IAA0Ce,OAAOC,KAAKX,EAAQY,UAAUC,KAAI,SAAAC,GACpE,OAAO,SAACtB,EAAD,CAAmBC,aAAcqB,EAAKpB,aAAcM,EAAQY,SAASE,IAAvDA,a,6BC9B5BC,EAAc,SAAC,GAAkC,IAAjCtB,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,aACvC,OACI,iBAAKb,UAAWc,EAAAA,SAAhB,WAA4B,yBAAIF,EAAJ,QACvBuB,EAAAA,EAAAA,GAAYvB,EAAcC,EAAcuB,EAAAA,EAAa,a,UCC5DC,GAAaC,EAAAA,EAAAA,IAAiB,GAC9BC,GAAaD,EAAAA,EAAAA,IAAiB,GAwCpC,GAF6BE,EAAAA,EAAAA,GAAU,CAACC,KAAM,WAAjBD,EApCL,SAAC,GAAoC,IAAnCrB,EAAkC,EAAlCA,QAASuB,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,MAC7C,OACI,kBAAMC,SAAUF,EAAhB,WACI,0BAAK,uCACJC,IAAS,iBAAM3C,UAAWC,EAAAA,EAAAA,iBAAjB,SAA2C0C,KACrD,iBAAK3C,UAAWc,EAAAA,OAAhB,WAA0B,cAAGd,UAAWc,EAAAA,KAAd,kCACrBqB,EAAAA,EAAAA,GAAY,GAAI,iBAAkBC,EAAAA,EAAa,QAAS,GAAI,CAACS,KAAM,iBAExE,4BAAK,cAAG7C,UAAWc,EAAAA,KAAd,yBACAqB,EAAAA,EAAAA,GAAY,YAAa,WAAYC,EAAAA,EAAa,QAAS,CAACU,EAAAA,GAAUT,QAE3E,4BACI,cAAGrC,UAAWc,EAAAA,KAAd,wBACCqB,EAAAA,EAAAA,GAAY,WAAY,UAAWC,EAAAA,EAAa,WAAY,CAACU,EAAAA,GAAUP,QAE5E,4BAAK,cAAGvC,UAAWc,EAAAA,KAAd,yBACAqB,EAAAA,EAAAA,GAAY,YAAa,4BAA6BC,EAAAA,EACnD,WAAY,CAACU,EAAAA,GAAUP,QAE/B,4BACI,cAAGvC,UAAWc,EAAAA,KAAd,wBACA,kBACCe,OAAOC,KAAKX,EAAQY,UAAUC,KAAI,SAAAC,GAC/B,OACI,SAACC,EAAD,CAAuBtB,aAAcqB,EAAKpB,aAAc,mBAAYoB,GAAMc,qBAAxDd,eCuB1C,EAjDoB,SAAC,GAAsE,IAArEd,EAAoE,EAApEA,QAAStB,EAA2D,EAA3DA,OAAQa,EAAmD,EAAnDA,aAAcU,EAAqC,EAArCA,QAAS4B,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,YAErE,GAAgCvD,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KAEA,IAAKuB,EACD,OAAO,SAAC+B,EAAA,EAAD,IAGX,IAAMC,EAAShC,EAAQgC,OAAOC,MAgB9B,OACI,iBAAKpD,UAAWc,EAAAA,iBAAhB,WACI,iBAAKd,UAAWc,EAAAA,KAAhB,WAOI,gBAAKU,IAAK2B,GAAUE,EAAM5B,IAAK,SAAwBzB,UAAWc,EAAAA,iBACjEM,IAAW,kBAAOyB,KAAM,OAAQzC,SAtBjB,SAACC,GACrBA,EAAEW,OAAOsC,MAAMC,QACfP,EAAU3C,EAAEW,OAAOsC,MAAM,QAqBrB,SAAC,EAAD,CAAwBzD,OAAQA,EAAQa,aAAcA,QAG1D,yBACKf,GACK,SAAC,EAAD,CAAiB6D,cAAerC,EAASA,QAASA,EAASyB,SAtB5D,SAACa,GACdR,EAAYQ,GAAUC,MAAK,WACvB9D,GAAY,UAqBF,SAACsB,EAAD,CAAaC,QAASA,EAASC,QAASA,EAASC,aAAc,kBAAMzB,GAAY,Y,oBChDvG,GAAgB,MAAQ,wBCAxB,EAAuB,mB,UCkBvB,EAfa,SAACH,GACV,OACI,iBAAKO,UAAWc,EAAhB,WACI,gBACIU,IAAKmC,EACLlC,IAAI,WAEPhC,EAAMmE,SACP,0BACI,oCAAYnE,EAAMoE,MAAlB,a,UCNVC,GAAcC,EAAAA,EAAAA,IAAiB,IAkB/BC,GAAgBxB,EAAAA,EAAAA,GAAU,CAACC,KAAM,QAAjBD,EAhBL,SAAC/C,GAEhB,OACI,kBAAMmD,SAAUnD,EAAMiD,aAAtB,WACI,0BAEI,SAACuB,EAAA,EAAD,CAAOC,KAAM,cAAeC,UAAW/B,EAAAA,EAAagC,UAAW,WACxDC,SAAU,CAACvB,EAAAA,GAAUgB,GAAc3D,YAAa,oBAE3D,0BACI,6CAQRmE,EAAUC,EAAAA,MAAW,SAAA9E,GAGvB,IAAI+E,GAAgB,OAAI/E,EAAMgF,OAAOC,UAAU1C,KAAI,SAAA2C,GAAC,OAAI,SAAC,EAAD,CAAMf,QAASe,EAAEf,QAASC,MAAOc,EAAEd,MAAOe,GAAID,EAAEC,IACpDD,EAAEf,YAMtD,OACI,iBAAK5D,UAAWc,EAAAA,WAAhB,WACI,eAAI+D,MAAO,CAACC,MAAO,UAAnB,uBACA,SAACd,EAAD,CAAepB,SAPL,SAACe,GACflE,EAAMsF,QAAQpB,EAAKqB,iBAOf,gBAAKhF,UAAWc,EAAAA,MAAhB,SACK0D,UAMjB,I,UC3BA,GAFyBS,EAAAA,EAAAA,KAfH,SAACC,GACnB,MAAO,CACHF,YAAaE,EAAMC,YAAYH,YAC/BP,MAAOS,EAAMC,YAAYV,UAIR,SAACW,GACtB,MAAO,CACHL,QAAS,SAACC,GACNI,GAASC,EAAAA,EAAAA,IAAqBL,QAKjBC,CAA6CX,GCAtE,EAfgB,SAAC7E,GAEb,OACI,iCACI,SAAC,EAAD,CAAauD,UAAWvD,EAAMuD,UACjBC,YAAaxD,EAAMwD,YACnB7B,QAAS3B,EAAM2B,QACfD,QAAS1B,EAAM0B,QACftB,OAAQJ,EAAMI,OACda,aAAcjB,EAAMiB,gBACjC,SAAC,EAAD,Q,oBCAN4E,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WA0ED,OA1ECA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,iBAAAA,MASF,WACI,IAAIC,EAAYC,KAAK/F,MAAMgG,OAAOC,OAAOC,OACrCC,EAAsBJ,KAAK/F,MAAMoG,oBACjCN,GACAC,KAAK/F,MAAMqG,gBAAiBP,GAC5BC,KAAK/F,MAAMsG,eAAgBR,IAEvBC,KAAK/F,MAAMuG,SACXR,KAAK/F,MAAMqG,gBAAiBF,GAC5BJ,KAAK/F,MAAMsG,eAAgBH,MAGtC,+BAED,WACIJ,KAAKS,mBAaR,gCAED,SAAmBC,EAAWC,EAAWC,GAEjCZ,KAAK/F,MAAMgG,OAAOC,OAAOC,SAAWO,EAAUT,OAAOC,OAAOC,QAC5DH,KAAKS,mBAgBZ,oBAED,WAEI,OAAKT,KAAK/F,MAAMuG,QAAWR,KAAK/F,MAAMgG,OAAOC,OAAOC,QAIhD,SAAC,GAAD,kBAAaH,KAAK/F,OAAlB,IACS0B,QAASqE,KAAK/F,MAAM0B,QACpBtB,OAAQ2F,KAAK/F,MAAMI,OACnBuB,SAAUoE,KAAK/F,MAAMgG,OAAOC,OAAOC,OACnC3C,UAAWwC,KAAK/F,MAAM4G,eACtBpD,YAAauC,KAAK/F,MAAM6G,iBACxB5F,aAAc8E,KAAK/F,MAAM8G,sBAT3B,SAAC,KAAD,CAAUC,GAAI,eAW5B,EA1EClB,CAAyBf,EAAAA,WAqG/B,OAAekC,EAAAA,EAAAA,KACXxB,EAAAA,EAAAA,KAzBkB,SAACC,GAEnB,MAAQ,CACJ/D,QAAS+D,EAAMC,YAAYhE,QAC3BtB,OAAQqF,EAAMC,YAAYtF,OAC1BgG,oBAAqBX,EAAMwB,KAAK9B,GAChCoB,OAAQd,EAAMwB,KAAKV,UAmBE,CACrBF,gBAAAA,EAAAA,GAAiBC,eAAAA,EAAAA,GAAgBQ,kBAAAA,EAAAA,GAAmBF,eAAAA,EAAAA,GAAgBC,iBAAAA,EAAAA,MAf5E,SAAoBK,GAUhB,OATA,SAAiClH,GAC7B,IAAImH,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXrB,GAASsB,EAAAA,EAAAA,MACb,OACI,SAACL,GAAD,kBAAelH,GAAf,IAAsBgG,OAAQ,CAACmB,SAAAA,EAAUE,SAAAA,EAAUpB,OAAAA,SAO/D,CAOEJ,I,gKCvHWlD,EAAc,SAAC,GAA0D,IAAzD6E,EAAwD,EAAxDA,MAAwD,IAAjDC,KAAOC,EAA0C,EAA1CA,QAASxE,EAAiC,EAAjCA,MAAQyB,EAAyB,EAAzBA,UAAc3E,GAAW,YAC3E2H,EAAYD,GAAWxE,EAC7B,OACI,iBAAK3C,UAAWC,EAAAA,EAAAA,YAAqB,KAAOmH,GAAanH,EAAAA,EAAAA,OAAzD,UACmB,aAAdmE,IAA4B,uCAAc6C,GAAWxH,IACvC,UAAd2E,IAAyB,oCAAW6C,GAAWxH,IAC/C2H,IAAa,0BAAOzE,QAKpBR,EAAc,SAAChC,EAAa+D,EAAMC,EAAWC,GAA/B,IAA0CiD,EAA1C,uDAAuD,GAAI5H,EAA3D,uDAAmE,GAAI6H,EAAvE,uDAA8E,GAA9E,OACvB,iBAAKzC,MAAO,CAAC0C,QAAS,QAAtB,WACI,SAAC,KAAD,QAAOpH,YAAaA,EAAa+D,KAAMA,EAAMC,UAAWA,EAAWC,UAAWA,EACvEC,SAAUgD,GAAgB5H,IAAS6H,O,sGCjB3C,IAAMxE,EAAW,SAAAvC,GACpB,IAAIA,EACJ,MAAO,qBAGEwD,EAAmB,SAACyD,GAAD,OAAe,SAACjH,GAC5C,GAAIA,EAAMgD,OAASiE,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,cAIrBlF,EAAmB,SAACmF,GAAD,OAAe,SAAClH,GAC5C,GAAIA,EAAMgD,OAASkE,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,mBCVlC,KAAgB,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C","sources":["webpack://react-1/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://react-1/./src/components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.css?c3a9","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusWihtHooks.jsx","components/Profile/ProfileInfo/ProfileData/Contact/Contact.jsx","components/Profile/ProfileInfo/ProfileData/ProfileData.jsx","components/Profile/ProfileInfo/ProfileDataForm/ContactForm/ContactForm.jsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","webpack://react-1/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://react-1/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","components/common/FormsControls/FormsControls.jsx","utils/validators/validators.js","webpack://react-1/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__TbLl8\",\"descriptionImg\":\"ProfileInfo_descriptionImg__xt1RA\",\"left\":\"ProfileInfo_left__3vbJL\",\"Contacts\":\"ProfileInfo_Contacts__ts2RX\",\"bold\":\"ProfileInfo_bold__tCPWP\"};","// extracted by mini-css-extract-plugin\nexport default {\"ProfileStatus\":\"ProfileStatus_ProfileStatus__MYOak\",\"Status\":\"ProfileStatus_Status__5GY0N\"};","import React, {useEffect, useState} from \"react\";\r\nimport styles from './ProfileStatus.module.css';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const changeStatusTrue = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const changeStatusFalse = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.ProfileStatus}>\r\n            <div></div>\r\n            <b className={styles.Status}>Status:</b>\r\n            { !editMode &&\r\n                    <span onDoubleClick={changeStatusTrue}>{props.status || 'No Status'}</span>\r\n            }\r\n            { editMode &&\r\n                    <input placeholder={props.status} onChange={onStatusChange} autoFocus={true}\r\n                           onBlur={changeStatusFalse}/>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import s from '../../ProfileInfo.module.css';\r\n\r\nexport const Contact = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={s.Contacts}>\r\n            <b>{contactTitle}: </b>\r\n            <a href={`${contactValue}`} target={'_blank'} rel='noreferrer'>{contactValue}</a>\r\n        </div>\r\n    );\r\n};","import s from '../ProfileInfo.module.css';\r\nimport { Contact } from './Contact/Contact';\r\n\r\nexport const ProfileData = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div className={s.descriptionText}>\r\n            { isOwner && <button onClick={goToEditMode}>Change</button>}\r\n            <div className={s.bold}><b>Looking For A Job: </b>\r\n                {/*{profile.lookingForAJob ? \"yes\" : \"no\"}*/}\r\n                {profile.lookingForAJob ?\r\n                    <img src=\"https://avatanplus.com/files/resources/original/5693e5540266115231b7d02a.png\"\r\n                         alt=\"smile\"/> :\r\n                    // 2 смайла на выбор)\r\n                    // <img src=\"http://cdn.onlinewebfonts.com/svg/img_437392.png\" alt=\"smile sad\"/>}\r\n                    <img\r\n                        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0b/Sert_-_sad_smile.svg/640px-Sert_-_sad_smile.svg.png\"\r\n                        alt=\"smile sad\"/>\r\n                }\r\n            </div>\r\n            <div><b className={s.bold}>Full Name:</b> {profile.fullName}</div>\r\n            <div><b className={s.bold}>My Skills:</b> {profile.lookingForAJobDescription}</div>\r\n            <div><b className={s.bold}>About Me: </b>{profile.aboutMe}</div>\r\n            {/*Это я делал на 60-м уроке*/}\r\n            {/*{contacts.facebook || contacts.vk || contacts.instagram || contacts.github ?*/}\r\n            {/*    <div><b>Контакты:</b> <br/>*/}\r\n            {/*        <a href=\"facebook.com/\">{profile.contacts.facebook}</a> <br/>*/}\r\n            {/*        <a href=\"vk.com/dimych\">{profile.contacts.vk}</a> <br/>*/}\r\n            {/*        <a href=\"instagra.com/sds\">{profile.contacts.instagram}</a> <br/>*/}\r\n            {/*        <a href=\"github.com/\">{profile.contacts.github}</a> <br/>*/}\r\n            {/*    </div> :*/}\r\n            {/*    <p><b style={{color: 'red'}}>Контакты не указаны</b></p>*/}\r\n            {/*}*/}\r\n            <div><b className={s.bold}>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n            })}\r\n            </div>\r\n\r\n\r\n            {/*{ profile.lookingForAJob &&*/}\r\n            {/*}*/}\r\n\r\n        </div>\r\n    );\r\n};\r\n","import { createField, FormControl } from '../../../../common/FormsControls/FormsControls';\r\nimport s from '../../ProfileInfo.module.css';\r\n\r\nexport const ContactForm = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={s.Contacts}><b>{contactTitle}:</b>\r\n            {createField(contactTitle, contactValue, FormControl, 'input')}\r\n        </div>\r\n    );\r\n};\r\n","import s from '../ProfileInfo.module.css';\r\nimport { reduxForm } from 'redux-form';\r\nimport { createField, FormControl } from '../../../common/FormsControls/FormsControls';\r\nimport { minLengthCreator, required } from '../../../../utils/validators/validators';\r\nimport { ContactForm } from './ContactForm/ContactForm';\r\nimport styles from '../../../common/FormsControls/FormsControls.module.css';\r\n\r\nconst minLength2 = minLengthCreator(2);\r\nconst minLength5 = minLengthCreator(5);\r\n\r\nconst ProfileDataForm = ({profile, handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><button>Save</button></div>\r\n            {error && <span className={styles.formSummaryError}>{error}</span>}\r\n            <div className={s.status}><b className={s.bold}>Looking For A Job: </b>\r\n                {createField('', 'lookingForAJob', FormControl, 'input', [], {type: 'checkbox'})}\r\n            </div>\r\n            <div><b className={s.bold}>Full Name:</b>\r\n                {createField('Full Name', 'fullName', FormControl, 'input', [required, minLength2])}\r\n            </div>\r\n            <div>\r\n                <b className={s.bold}>About Me:</b>\r\n                {createField('About Me', 'aboutMe', FormControl, 'textarea', [required, minLength5])}\r\n            </div>\r\n            <div><b className={s.bold}>My Skills:</b>\r\n                {createField('My Skills', 'lookingForAJobDescription', FormControl,\r\n                    'textarea', [required, minLength5])}\r\n            </div>\r\n            <div>\r\n                <b className={s.bold}>Contacts:</b>\r\n                <br/>\r\n                {Object.keys(profile.contacts).map(key => {\r\n                    return (\r\n                        <ContactForm key={key} contactTitle={key} contactValue={`contacts.${key}`.toLocaleLowerCase()} />\r\n                    // <div key={key}>\r\n                    //     <b>{key}:</b> {createField(key, 'contacts.' + key.toLocaleLowerCase(), FormControl, 'input')}\r\n                    //     {/*<b>{key}:</b> {createField(key, `contacts.${key}`, FormControl, 'input')}*/}\r\n                    // </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst ProfileDataReduxForm = reduxForm({form: 'profile'})(ProfileDataForm);\r\n\r\nexport default ProfileDataReduxForm;","import React, { useState } from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Spinner from \"../../common/Spinner/Spinner\";\r\nimport plug from '../../../assets/img/plug.png';\r\nimport ProfileStatusWithHooks from \"./ProfileStatus/ProfileStatusWihtHooks\";\r\nimport { ProfileData } from './ProfileData/ProfileData';\r\nimport ProfileDataForm from './ProfileDataForm/ProfileDataForm';\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) { // если в props profile нет или null или undefined\r\n        return <Spinner/> // отображаем спиннер\r\n    }\r\n\r\n    const photos = profile.photos.large;\r\n    // const contacts = profile.contacts;\r\n\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    const onSubmit = (formData) => {\r\n        saveProfile(formData).then(() => {\r\n            setEditMode(false);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className={s.descriptionBlock}>\r\n            <div className={s.left}>\r\n                {/* мое решение */}\r\n                {/*{photos ?*/}\r\n                {/*    <img src={photos} alt=\"avatar\"/> :*/}\r\n                {/*    <img src={plug} alt=\"Заглушка\"/>*/}\r\n                {/*}*/}\r\n                {/* решение похожее на Димыча */}\r\n                <img src={photos || plug} alt={'avatar' || 'Заглушка'} className={s.descriptionImg}/>\r\n                {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                {/*<ProfileStatus status={props.status} updateStatus={props.updateStatus}/>*/}\r\n            </div>\r\n            <div>\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => setEditMode(true)}/>\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__EjxuY\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__blTOr\",\"active\":\"Post_active__dWqA5\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport post from '../../../../assets/img/post.jpg'\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src={post}\r\n                alt=\"avatar\"\r\n            />\r\n            {props.message}\r\n            <div>\r\n                <span>like {props.count} </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../../utils/validators/validators';\r\nimport { FormControl } from '../../common/FormsControls/FormsControls';\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst PostForm = (props) => {\r\n    // debugger\r\n  return  (\r\n      <form onSubmit={props.handleSubmit}>\r\n          <div>\r\n              {/*<Field name={'newPostText'} component={Textarea} typeField={'textarea'}*/}\r\n              <Field name={'newPostText'} component={FormControl} typeField={'textarea'}\r\n                     validate={[required, maxLength10]} placeholder={'Post message'}/>\r\n          </div>\r\n          <div>\r\n              <button>SEND</button>\r\n          </div>\r\n      </form>\r\n  )\r\n}\r\n\r\nconst PostReduxForm = reduxForm({form: 'post'})(PostForm);\r\n\r\nconst MyPosts = React.memo(props => {\r\n    // console.log('RENDER');\r\n// debugger;\r\n    let postsElements = [...props.posts].reverse().map(p => <Post message={p.message} count={p.count} id={p.id}\r\n                                                   key={p.message}/>);\r\n\r\n    const onAddPost = (post) => {\r\n        props.addPost(post.newPostText);\r\n    };\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3 style={{color: 'indigo'}}>My posts</h3>\r\n            <PostReduxForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default MyPosts;\r\n","import {addPostActionCreator} from '../../../redux/profileReducer';\r\nimport MyPosts from './MyPosts';\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        newPostText: state.profilePage.newPostText,\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n\r\nconst Profile = (props) => {\r\n    // console.log('profile')\r\n    return (\r\n        <>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         saveProfile={props.saveProfile}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getProfileThunk,\r\n    getStatusThunk,\r\n    savePhotoThunk,\r\n    saveProfileThunk,\r\n    updateStatusThunk\r\n} from \"../../redux/profileReducer\";\r\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n    // эт для 80 урока\r\n    // constructor(props) {\r\n    //     super( props );\r\n    //     this.state = {\r\n    //         isShowMyProfile: true\r\n    //     }\r\n    // }\r\n\r\n    refreshProfile() {\r\n        let profileId = this.props.router.params.userId;\r\n        let authorisedProfileId = this.props.authorizedProfileId;\r\n        if (profileId) {\r\n            this.props.getProfileThunk( profileId );\r\n            this.props.getStatusThunk( profileId );\r\n        } else {\r\n            if (this.props.isAuth) {\r\n                this.props.getProfileThunk( authorisedProfileId );\r\n                this.props.getStatusThunk( authorisedProfileId );\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n        // эт для 80 урока\r\n        // let profileId = this.props.router.params.userId;\r\n        // let authorisedProfileId = this.props.authorizedProfileId;\r\n        // if (profileId) {\r\n        //     this.props.getProfileThunk( profileId );\r\n        //     this.props.getStatusThunk( profileId );\r\n        // } else {\r\n        //     if (this.props.isAuth) {\r\n        //         this.props.getProfileThunk( authorisedProfileId );\r\n        //         this.props.getStatusThunk( authorisedProfileId );\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        // debugger\r\n        if (this.props.router.params.userId !== prevProps.router.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n        // эт для 80 урока\r\n        // let profileId = +this.props.router.params.userId;\r\n        // let authorisedProfileId = this.props.authorizedProfileId;\r\n        // let isShowMyProfile = this.state.isShowMyProfile;\r\n        // if (isShowMyProfile) {\r\n        //     if (profileId === authorisedProfileId) {\r\n        //         this.setState( {isShowMyProfile: false} )\r\n        //     }\r\n        //     if (!profileId && this.props.isAuth) {\r\n        //         this.props.getProfileThunk( authorisedProfileId );\r\n        //         this.props.getStatusThunk( authorisedProfileId );\r\n        //         this.setState( {isShowMyProfile: false} )\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    render() {\r\n        // console.log('Render Profile');\r\n        if (!this.props.isAuth && !this.props.router.params.userId) {\r\n            return <Navigate to={'/login'} />\r\n        }\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     isOwner={!this.props.router.params.userId}\r\n                     savePhoto={this.props.savePhotoThunk}\r\n                     saveProfile={this.props.saveProfileThunk}\r\n                     updateStatus={this.props.updateStatusThunk}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    // console.log('mapStateToProps Profile');\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedProfileId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    })\r\n}\r\n\r\n// wrapper to use react router's v6 hooks in class component(to use HOC pattern, like in router v5)\r\nfunction withRouter(Component) {\r\n    function ComponentWithRouterProp(props) {\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n        return (\r\n            <Component {...props} router={{location, navigate, params}}/>\r\n        );\r\n    }\r\n\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        getProfileThunk, getStatusThunk, updateStatusThunk, savePhotoThunk, saveProfileThunk\r\n    }),\r\n    withRouter,\r\n    // withNavigate\r\n    // withAuthRedirect\r\n)(ProfileContainer);\r\n\r\n\r\n","import { Field } from 'redux-form';\r\nimport styles from './FormsControls.module.css';\r\n\r\nexport const FormControl = ({input, meta: {touched, error}, typeField, ...props}) => {\r\n    const showError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + ' ' + (showError && styles.error)}>\r\n            {typeField === 'textarea' && <textarea {...input} {...props} />}\r\n            {typeField === 'input' && <input {...input} {...props} />}\r\n            {showError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const createField = (placeholder, name, component, typeField, validators = [], props = {}, text = '') => (\r\n    <div style={{display: 'flex'}}>\r\n        <Field placeholder={placeholder} name={name} component={component} typeField={typeField}\r\n               validate={validators} {...props}/>{text}\r\n    </div>\r\n)\r\n\r\n// export const Textarea = ({input, meta, ...props}) => {\r\n//     const showError = meta.touched && meta.error;\r\n//     return (\r\n//         <div className={styles.formControl + ' ' + (showError && styles.error)}>\r\n//             <textarea {...input} {...props} />\r\n//             {showError && <span>{meta.error}</span>}\r\n//         </div>\r\n//     )\r\n// }\r\n//\r\n// export const Input = ({input, meta, ...props}) => {\r\n//     const showError = meta.touched && meta.error;\r\n//     return (\r\n//         <div className={styles.formControl + ' ' + (showError && styles.error)}>\r\n//             <input {...input} {...props} />\r\n//             {showError && <span>{meta.error}</span>}\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// const FormControl = ({input, meta, children}) => {\r\n//     const showError = meta.touched && meta.error;\r\n//     return (\r\n//         <div className={styles.formControl + ' ' + (showError && styles.error)}>\r\n//             <children.type {...input} {...children.props} />\r\n//             {/*<textarea {...input} {...props} />*/}\r\n//             {showError && <span>{meta.error}</span>}\r\n//         </div>\r\n//     )\r\n// }\r\n//\r\n// export const Textarea = props => {\r\n//     return<FormControl {...props}><textarea/></FormControl>\r\n// }\r\n// export const Input = props => {\r\n//     return<FormControl {...props}><input/></FormControl>\r\n// }\r\n\r\n","export const required = value => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n};\r\n\r\nexport const minLengthCreator = (minLength) => (value) => {\r\n    if (value.length < minLength) return `Min length is ${minLength} symbols`;\r\n    return undefined;\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__Bh-UJ\",\"error\":\"FormsControls_error__qTX8L\",\"formSummaryError\":\"FormsControls_formSummaryError__-weCl\"};"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","className","styles","onDoubleClick","placeholder","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","Contact","contactTitle","contactValue","s","href","target","rel","ProfileData","profile","isOwner","goToEditMode","onClick","lookingForAJob","src","alt","fullName","lookingForAJobDescription","aboutMe","Object","keys","contacts","map","key","ContactForm","createField","FormControl","minLength2","minLengthCreator","minLength5","reduxForm","form","handleSubmit","error","onSubmit","type","required","toLocaleLowerCase","savePhoto","saveProfile","Spinner","photos","large","plug","files","length","initialValues","formData","then","post","message","count","maxLength10","maxLengthCreator","PostReduxForm","Field","name","component","typeField","validate","MyPosts","React","postsElements","posts","reverse","p","id","style","color","addPost","newPostText","connect","state","profilePage","dispatch","addPostActionCreator","ProfileContainer","profileId","this","router","params","userId","authorisedProfileId","authorizedProfileId","getProfileThunk","getStatusThunk","isAuth","refreshProfile","prevProps","prevState","snapshot","savePhotoThunk","saveProfileThunk","updateStatusThunk","to","compose","auth","Component","location","useLocation","navigate","useNavigate","useParams","input","meta","touched","showError","validators","text","display","maxLength","minLength"],"sourceRoot":""}