{"version":3,"file":"static/js/797.7af9977c.chunk.js","mappings":"gMASMA,GAAaC,EAAAA,EAAAA,IAAiB,GAC9BC,GAAaD,EAAAA,EAAAA,IAAiB,GAiB9BE,GAAiBC,EAAAA,EAAAA,GAAU,CAC7BC,KAAM,SADaD,EAdL,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,MAC9B,OACI,kBAAMC,SAAUF,EAAhB,WACKG,EAAAA,EAAAA,GAAY,QAAS,QAASC,EAAAA,EAAa,QAAS,CAACC,EAAAA,GAAUX,KAC/DS,EAAAA,EAAAA,GAAY,WAAY,WAAYC,EAAAA,EAAa,QAAS,CAACC,EAAAA,GAAUT,GAAa,CAACU,KAAM,cACzFH,EAAAA,EAAAA,GAAY,KAAM,aAAcC,EAAAA,EAAa,QAAS,GAAI,CAACE,KAAM,YAAa,eAC9EL,IAAS,iBAAMM,UAAWC,EAAAA,EAAAA,iBAAjB,SAA2CP,KACrD,0BACI,8CA6BhB,WAAeQ,EAAAA,EAAAA,KALS,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAME,KAAKD,UAIiB,CAACE,kBAAAA,EAAAA,IAAzC,EAnBc,SAACC,GAIX,OAAIA,EAAMH,QACC,SAAC,KAAD,CAAUI,GAAI,cAGrB,iCACI,eAAIC,MAAO,CAACC,MAAO,UAAnB,oBACA,SAACpB,EAAD,CAAgBK,SATP,SAACgB,GACdJ,EAAMD,kBAAkBK,EAASC,MAAOD,EAASE,SAAUF,EAASG,sB,gKC9B/DjB,EAAc,SAAC,GAA0D,IAAzDkB,EAAwD,EAAxDA,MAAwD,IAAjDC,KAAOC,EAA0C,EAA1CA,QAASvB,EAAiC,EAAjCA,MAAQwB,EAAyB,EAAzBA,UAAcX,GAAW,YAC3EY,EAAYF,GAAWvB,EAC7B,OACI,iBAAKM,UAAWC,EAAAA,EAAAA,YAAqB,KAAOkB,GAAalB,EAAAA,EAAAA,OAAzD,UACmB,aAAdiB,IAA4B,uCAAcH,GAAWR,IACvC,UAAdW,IAAyB,oCAAWH,GAAWR,IAC/CY,IAAa,0BAAOzB,QAKpBE,EAAc,SAACwB,EAAaC,EAAMC,EAAWJ,GAA/B,IAA0CK,EAA1C,uDAAuD,GAAIhB,EAA3D,uDAAmE,GAAIiB,EAAvE,uDAA8E,GAA9E,OACvB,iBAAKf,MAAO,CAACgB,QAAS,QAAtB,WACI,SAAC,KAAD,QAAOL,YAAaA,EAAaC,KAAMA,EAAMC,UAAWA,EAAWJ,UAAWA,EACvEQ,SAAUH,GAAgBhB,IAASiB,O,sGCjB3C,IAAM1B,EAAW,SAAA6B,GACpB,IAAIA,EACJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,cAIrBzC,EAAmB,SAAC2C,GAAD,OAAe,SAACJ,GAC5C,GAAIA,EAAMG,OAASC,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,mBCVlC,KAAgB,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB","sources":["components/Login/Login.jsx","components/common/FormsControls/FormsControls.jsx","utils/validators/validators.js","webpack://react-1/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["import { reduxForm } from \"redux-form\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { getAuthLoginThunk } from \"../../redux/authReducer\";\r\nimport { createField, FormControl } from '../common/FormsControls/FormsControls';\r\nimport { minLengthCreator, required } from '../../utils/validators/validators';\r\n\r\nimport styles from '../common/FormsControls/FormsControls.module.css'\r\n\r\nconst minLength2 = minLengthCreator(2);\r\nconst minLength8 = minLengthCreator(8);\r\n\r\n\r\nconst LoginForm = ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField('Email', 'email', FormControl, 'input', [required, minLength2])}\r\n            {createField('Password', 'password', FormControl, 'input', [required, minLength8], {type: 'password'})}\r\n            {createField(null, 'rememberMe', FormControl, 'input', [], {type: 'checkbox'}, 'remember me')}\r\n            {error && <span className={styles.formSummaryError}>{error}</span>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({\r\n    form: 'login',\r\n})(LoginForm);\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.getAuthLoginThunk(formData.email, formData.password, formData.rememberMe);\r\n    }\r\n    if (props.isAuth) {\r\n        return <Navigate to={'/profile'}/>\r\n    }\r\n    return (\r\n        <>\r\n            <h1 style={{color: 'indigo'}}>LOGIN</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {getAuthLoginThunk})(Login);\r\n","import { Field } from 'redux-form';\r\nimport styles from './FormsControls.module.css';\r\n\r\nexport const FormControl = ({input, meta: {touched, error}, typeField, ...props}) => {\r\n    const showError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + ' ' + (showError && styles.error)}>\r\n            {typeField === 'textarea' && <textarea {...input} {...props} />}\r\n            {typeField === 'input' && <input {...input} {...props} />}\r\n            {showError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const createField = (placeholder, name, component, typeField, validators = [], props = {}, text = '') => (\r\n    <div style={{display: 'flex'}}>\r\n        <Field placeholder={placeholder} name={name} component={component} typeField={typeField}\r\n               validate={validators} {...props}/>{text}\r\n    </div>\r\n)\r\n\r\n// export const Textarea = ({input, meta, ...props}) => {\r\n//     const showError = meta.touched && meta.error;\r\n//     return (\r\n//         <div className={styles.formControl + ' ' + (showError && styles.error)}>\r\n//             <textarea {...input} {...props} />\r\n//             {showError && <span>{meta.error}</span>}\r\n//         </div>\r\n//     )\r\n// }\r\n//\r\n// export const Input = ({input, meta, ...props}) => {\r\n//     const showError = meta.touched && meta.error;\r\n//     return (\r\n//         <div className={styles.formControl + ' ' + (showError && styles.error)}>\r\n//             <input {...input} {...props} />\r\n//             {showError && <span>{meta.error}</span>}\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// const FormControl = ({input, meta, children}) => {\r\n//     const showError = meta.touched && meta.error;\r\n//     return (\r\n//         <div className={styles.formControl + ' ' + (showError && styles.error)}>\r\n//             <children.type {...input} {...children.props} />\r\n//             {/*<textarea {...input} {...props} />*/}\r\n//             {showError && <span>{meta.error}</span>}\r\n//         </div>\r\n//     )\r\n// }\r\n//\r\n// export const Textarea = props => {\r\n//     return<FormControl {...props}><textarea/></FormControl>\r\n// }\r\n// export const Input = props => {\r\n//     return<FormControl {...props}><input/></FormControl>\r\n// }\r\n\r\n","export const required = value => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n};\r\n\r\nexport const minLengthCreator = (minLength) => (value) => {\r\n    if (value.length < minLength) return `Min length is ${minLength} symbols`;\r\n    return undefined;\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__0of4A\",\"error\":\"FormsControls_error__Wdj+e\",\"formSummaryError\":\"FormsControls_formSummaryError__Zo112\"};"],"names":["minLength2","minLengthCreator","minLength8","LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","createField","FormControl","required","type","className","styles","connect","state","isAuth","auth","getAuthLoginThunk","props","to","style","color","formData","email","password","rememberMe","input","meta","touched","typeField","showError","placeholder","name","component","validators","text","display","validate","value","maxLengthCreator","maxLength","length","minLength"],"sourceRoot":""}